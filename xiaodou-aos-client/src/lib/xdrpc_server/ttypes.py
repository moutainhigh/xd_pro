#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Server:
  """
  Attributes:
   - serverId
   - serverName
   - tomcatAdress
   - tomcatTemplate
   - warAdress
   - tomcatName
   - fileAdress
   - clientHost
   - serverstate
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'serverId', None, None, ), # 1
    (2, TType.STRING, 'serverName', None, None, ), # 2
    (3, TType.STRING, 'tomcatAdress', None, None, ), # 3
    (4, TType.STRING, 'tomcatTemplate', None, None, ), # 4
    (5, TType.STRING, 'warAdress', None, None, ), # 5
    (6, TType.STRING, 'tomcatName', None, None, ), # 6
    (7, TType.STRING, 'fileAdress', None, None, ), # 7
    (8, TType.STRING, 'clientHost', None, None, ), # 8
    (9, TType.STRING, 'serverstate', None, None, ), # 9
  )

  def __init__(self, serverId=None, serverName=None, tomcatAdress=None, tomcatTemplate=None, warAdress=None, tomcatName=None, fileAdress=None, clientHost=None, serverstate=None,):
    self.serverId = serverId
    self.serverName = serverName
    self.tomcatAdress = tomcatAdress
    self.tomcatTemplate = tomcatTemplate
    self.warAdress = warAdress
    self.tomcatName = tomcatName
    self.fileAdress = fileAdress
    self.clientHost = clientHost
    self.serverstate = serverstate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.serverId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.serverName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.tomcatAdress = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.tomcatTemplate = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.warAdress = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.tomcatName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.fileAdress = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.clientHost = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.serverstate = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Server')
    if self.serverId is not None:
      oprot.writeFieldBegin('serverId', TType.STRING, 1)
      oprot.writeString(self.serverId)
      oprot.writeFieldEnd()
    if self.serverName is not None:
      oprot.writeFieldBegin('serverName', TType.STRING, 2)
      oprot.writeString(self.serverName)
      oprot.writeFieldEnd()
    if self.tomcatAdress is not None:
      oprot.writeFieldBegin('tomcatAdress', TType.STRING, 3)
      oprot.writeString(self.tomcatAdress)
      oprot.writeFieldEnd()
    if self.tomcatTemplate is not None:
      oprot.writeFieldBegin('tomcatTemplate', TType.STRING, 4)
      oprot.writeString(self.tomcatTemplate)
      oprot.writeFieldEnd()
    if self.warAdress is not None:
      oprot.writeFieldBegin('warAdress', TType.STRING, 5)
      oprot.writeString(self.warAdress)
      oprot.writeFieldEnd()
    if self.tomcatName is not None:
      oprot.writeFieldBegin('tomcatName', TType.STRING, 6)
      oprot.writeString(self.tomcatName)
      oprot.writeFieldEnd()
    if self.fileAdress is not None:
      oprot.writeFieldBegin('fileAdress', TType.STRING, 7)
      oprot.writeString(self.fileAdress)
      oprot.writeFieldEnd()
    if self.clientHost is not None:
      oprot.writeFieldBegin('clientHost', TType.STRING, 8)
      oprot.writeString(self.clientHost)
      oprot.writeFieldEnd()
    if self.serverstate is not None:
      oprot.writeFieldBegin('serverstate', TType.STRING, 9)
      oprot.writeString(self.serverstate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.serverId)
    value = (value * 31) ^ hash(self.serverName)
    value = (value * 31) ^ hash(self.tomcatAdress)
    value = (value * 31) ^ hash(self.tomcatTemplate)
    value = (value * 31) ^ hash(self.warAdress)
    value = (value * 31) ^ hash(self.tomcatName)
    value = (value * 31) ^ hash(self.fileAdress)
    value = (value * 31) ^ hash(self.clientHost)
    value = (value * 31) ^ hash(self.serverstate)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DefaultModel:
  """
  Attributes:
   - model
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'model', None, None, ), # 1
  )

  def __init__(self, model=None,):
    self.model = model

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.model = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DefaultModel')
    if self.model is not None:
      oprot.writeFieldBegin('model', TType.STRING, 1)
      oprot.writeString(self.model)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.model)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
