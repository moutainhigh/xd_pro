<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="AccountWallet">
	<resultMap id="BaseResultMap" type="com.xiaodou.wallet.model.AccountWallet">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="user_id" property="userId" jdbcType="VARCHAR" />
		<result column="account_classify" property="accountClassify"
			jdbcType="VARCHAR" />
		<result column="business_type" property="businessType"
			jdbcType="INTEGER" />
		<result column="account_amount" property="accountAmount"
			jdbcType="DOUBLE" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
	</resultMap>
	<sql id="base_column">id, user_id, account_classify, business_type,
		account_amount, create_time</sql>
	<select id="findEntityById" resultMap="BaseResultMap"
		parameterType="com.xiaodou.wallet.model.AccountWallet">
		select
		<include refid="base_column" />
		from xd_account_wallet
		where id = #{id,jdbcType=BIGINT}
	</select>
	<select id="findEntityById4Update" resultMap="BaseResultMap"
		parameterType="com.xiaodou.wallet.model.AccountWalletBill">
		select
		<include refid="base_column" />
		from xd_account_wallet
		where id = #{id,jdbcType=BIGINT}
		for update
	</select>
	<select id="findEntityBy3d4Update" resultMap="BaseResultMap"
		parameterType="com.xiaodou.wallet.model.AccountWallet">
		select
		<include refid="base_column" />
		from xd_account_wallet
		where user_id = #{userId,jdbcType=VARCHAR}
		and
		business_type = #{businessType,jdbcType=INTEGER}
		and account_classify =
		#{accountClassify,jdbcType=VARCHAR}
		for update
	</select>
	<select id="findEntityListByCond" resultMap="BaseResultMap"
		parameterType="java.util.Map">
		select
		<include refid="dynamic_output" />
		from xd_account_wallet
		<include refid="dynamic_where" />
		<include refid="dynamic_sort" />
		<include refid="dynamic_limit" />
	</select>
	<insert id="addEntity" parameterType="com.xiaodou.wallet.model.AccountWallet">
		insert into xd_account_wallet
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">id,</if>
			<if test="userId != null">user_id,</if>
			<if test="accountClassify != null">account_classify,</if>
			<if test="businessType != null">business_type,</if>
			<if test="accountAmount != null">account_amount,</if>
			<if test="createTime != null">create_time,</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">#{id,jdbcType=BIGINT},</if>
			<if test="userId != null">#{userId,jdbcType=VARCHAR},</if>
			<if test="accountClassify != null">#{accountClassify,jdbcType=VARCHAR},</if>
			<if test="businessType != null">#{businessType,jdbcType=INTEGER},</if>
			<if test="accountAmount != null">#{accountAmount,jdbcType=DOUBLE},</if>
			<if test="createTime != null">#{createTime,jdbcType=TIMESTAMP},</if>
		</trim>
	</insert>
	<update id="updateEntityById" parameterType="com.xiaodou.wallet.model.AccountWallet">
		update xd_account_wallet
		<set>
			<if test="value != null and value.accountAmount != null">account_amount = #{value.accountAmount,jdbcType=DOUBLE},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateEntity" parameterType="com.xiaodou.wallet.model.AccountWallet">
		update xd_account_wallet
		<set>
			<if test="value != null and value.accountAmount != null">account_amount = #{value.accountAmount,jdbcType=DOUBLE},
			</if>
		</set>
		<include refid="dynamic_where" />
	</update>
	<update id="deleteEntityById" parameterType="com.xiaodou.wallet.model.AccountWallet">
		delete from
		xd_account_wallet
		where id = #{id,jdbcType=BIGINT}
	</update>
	<delete id="deleteEntity" parameterType="java.util.Map">
		delete from xd_account_wallet
		<include refid="dynamic_where" />
	</delete>
	<sql id="dynamic_output">
		<trim suffixOverrides=",">
			<if test="output != null and output.id != null">id,</if>
			<if test="output != null and output.userId != null">user_id,</if>
			<if test="output != null and output.accountClassify != null">account_classify,</if>
			<if test="output != null and output.businessType != null">business_type,</if>
			<if test="output != null and output.accountAmount != null">account_amount,</if>
			<if test="output != null and output.createTime != null">create_time,</if>
		</trim>
	</sql>
	<sql id="dynamic_where">
		<where>
			<if test="input != null and input.id != null">and id=#{input.id}</if>
			<if test="input != null and input.userId != null">and user_id=#{input.userId}</if>
			<if test="input != null and input.accountClassify != null">and account_classify=#{input.accountClassify}</if>
			<if test="input != null and input.businessType != null">and business_type=#{input.businessType}</if>
			<if test="input != null and input.accountAmount != null">and account_amount=#{input.accountAmount}</if>
			<if test="input != null and input.createTimeLower != null">and create_time &gt; #{input.createTimeLower}</if>
			<if test="input != null and input.createTimeUpper != null">and create_time &lt; #{input.createTimeLower}</if>
		</where>
	</sql>
	<sql id="dynamic_limit">
		<if
			test="limit != null and limit.limitStart != null and limit.limitCount != null">
			limit ${limit.limitStart}, ${limit.limitCount}
		</if>
	</sql>
	<sql id="dynamic_sort">
		<trim suffixOverrides=",">
			<if test="sort !=null">
				order by
			</if>
			<if
				test="sort != null and sort.id != null and ( sort.id == 'ASC' or sort.id == 'DESC' )">id ${sort.id},</if>
			<if
				test="sort != null and sort.userId != null and ( sort.userId == 'ASC' or sort.userId == 'DESC' )">user_id ${sort.userId},</if>
			<if
				test="sort != null and sort.accountClassify != null and ( sort.accountClassify == 'ASC' or sort.accountClassify == 'DESC' )">account_classify ${sort.accountClassify},</if>
			<if
				test="sort != null and sort.businessType != null and ( sort.businessType == 'ASC' or sort.businessType == 'DESC' )">business_type ${sort.businessType},</if>
			<if
				test="sort != null and sort.accountAmount != null and ( sort.accountAmount == 'ASC' or sort.accountAmount == 'DESC' )">account_amount ${sort.accountAmount},</if>
			<if
				test="sort != null and sort.createTime != null and ( sort.createTime == 'ASC' or sort.createTime == 'DESC' )">create_time ${sort.createTime},</if>
		</trim>
	</sql>
</mapper>